rasa open source -> oq o caa mostra na aula
rasa x -> pode ajudar a descobrir ocmo melhorar

 professor fala q podemos fazer integracao com elastic search "eventualmente", o rasa suoprta isso

 -- instalacao (tá no dockerfile, caso a gt va usar o docker)
 pip3 install -U pip
 pip install rasa
 

 -- criar projeto (foi o q gerou a estrutura de arquivos atual)
 rasa init


-- ESTRUTURA
-- define as intencoes
 data/nlu.yml

-- define respostas pra cada possivel intencao
data/domain.yml
*aqui tbm da pra definir coisas relacionacas a integracao com o telegram, como opcoes de botoes q aparecem como respostas ao q o user fala*

-- exemplos de dialogos
data/stories.yml

-- regras q devem ser seguidas, ignorando o fluxo da conversa
data/rules.yml

*os 3 primeiros da pra a gt fazer um script pra gerar eles usando nosso database. Mas talvez nem precise de script, pq talvez a gt tenha q definir algo manualmente*

-- integracao com telegram
ele usa docker, telegram e Ngrok (pra expor a porta do computador pra a iternet)

rasa train --treina o bot usando os yml acima
TODO:
    [] entender como configurar o modelo usado nesse train pra usar o keras (essa parte pode dar trabalho) (nao é no actions.py pq o actions é pra criar acoes tipo conexao com apis ou banco de dados, o actions é rodado na hr de rodar o bot, nao na hr de treinar)


./ngrok http 5005 -- inicia servidor ngrok mapeando pra porta 5005
* após rodar isso, copiar as credenciais q ele gera pra dentro das credenciais do rasa

após isso: rodar
o docker run & 
rasa run actions &
rasa run

TODO: 
    [] ver oq o docker q ele usa na demo (rasa/duckling) faz e entender se a gt precisa

links uteis (pra estudar rasa):
https://blog.rasa.com/intents-entities-understanding-the-rasa-nlu-pipeline/

https://blog.tensorflow.org/2020/12/how-rasa-open-source-gained-layers-of-flexibility-with-tensorflow-2x.html

